{
  "hash": "96101372c4dd930444e884939627b12b",
  "result": {
    "markdown": "---\ntitle: Data Load and Python\nauthor: DG Lim\ndate: '2023-11-09'\ncategories:\n  - news\n  - analysis\nimage: donggeon_image.jpeg\n---\n\n데이터 로드와 파이썬 되는지 확인\n# Data Load and Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# 라이브러리 파일 실행\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport csv\nimport os\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npath = '/Users/limdonggeon/Desktop/workspace/limdg119.github.io/posts/data'\n```\n:::\n\n\n# 1. 지하철 유무임 승차비율 데이터 분석\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# 데이터 불러오기\ndata1 = []\nwith open(path+'/metro_fare.csv', 'r', encoding='cp949') as f:\n    source1 = csv.reader(f, delimiter=',')\n    #print(source)\n    header1 = next(source1)\n    for row in source1:\n        data1.append(row)\n\n# 데이터 확인\nprint(header1)\nprint(data1[0])\n\n# 데이터 ndarray로 만들기\ndata_array1 = np.array(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['사용월', '호선명', '역ID', '지하철역', '유임승차', '유임하차', '무임승차', '무임하차', '작업일시', '']\n['Jun-22', '1호선', '150', '서울역', '1,150,754', '1,123,193', '194,717', '187,155', '2022-07-03 9:48', '2,655,819']\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# 불러온 데이터 결측치 여부 확인\ncnt = 0\nfor row in range(len(data_array1)):\n    for i in range(len(data_array1[0])):\n        if ((data_array1[row][i] == '') or (data_array1[row][i] == np.NAN)):\n            cnt = cnt + 1\n            print(cnt, '번째 결측치',row,i)\n\nif cnt == 0:\n    print('결측치가 존재하지 않습니다.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n결측치가 존재하지 않습니다.\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# 같은 역에대한 데이터가 존재하는지 확인\n# 이름이 같지만 호선이 다른 경우 다른 역으로 표현함 (1호선 시청역과 2호선 시청역은 다름)\n# 호선 + 역 이름으로 역 리스트 생성\ncnt = 0\nstation1 = []\nfor row in range(len(data_array1)):\n    station_name1 = data_array1[row][1] + ' ' + data_array1[row][3]\n    if station_name1 in station1:\n        print(station_name1 +'이 겹칩니다.')\n    station1.append(station_name1)\nif cnt == 0:\n    print('호선과 역 이름이 동시에 겹치는 역이 없습니다.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n호선과 역 이름이 동시에 겹치는 역이 없습니다.\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# ndarray형태에서 ,때문에 인원들에 대한 요소값을 int 형태로 변경 불가\n# list를 만들어 ,를 지운 후 ndarray형태로 변경\nstationary_board_list = []\nfree_board_list = []\nstationary_deboard_list = []\nfree_deboard_list = []\n\nfor row in data1:\n    stationary_board_list.append(row[4].replace(',',''))\n    free_board_list.append(row[6].replace(',',''))\n    stationary_deboard_list.append(row[5].replace(',',''))\n    free_deboard_list.append(row[7].replace(',',''))\n\nstationary_board_array = np.array(stationary_board_list)\nfree_board_array = np.array(free_board_list)\nstationary_deboard_array = np.array(stationary_deboard_list)\nfree_deboard_array = np.array(free_deboard_list)\n\n# 승차인원\n# 유임승차 인원에 대한 요소값의 형태를 int로 변경\nstationary_board = stationary_board_array.astype(int)\n# 무임승차 인원에 대한 요소값의 형태를 int로 변경\nfree_board = free_board_array.astype(int)\n\n# 하차인원\n# 유임하차 인원에 대한 요소값의 형태를 int로 변경\nstationary_deboard = stationary_deboard_array.astype(int)\n# 무임하차 인원에 대한 요소값의 형태를 int로 변경\nfree_deboard = free_deboard_array.astype(int)\n```\n:::\n\n\n## 1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint('1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.')\n# 역별 승차인원 ndarray 만들기\ntotal_board = stationary_board + free_board\n# 최대 승차인원 값과 인덱스 찾기\nboard_max_idx = np.argmax(total_board)\nboard_max_value = total_board[board_max_idx]\nprint(f'최대 승차 : {station1[board_max_idx]}역 {board_max_value}명 승차')\n\n# 역별 하차인원 ndarray 만들기\ntotal_deboard = stationary_deboard + free_deboard\n# 최대 하차인원 값과 인덱스 찾기\ndeboard_max_idx = np.argmax(total_deboard)\ndeboard_max_value = total_deboard[deboard_max_idx]\nprint(f'최대 하차 : {station1[deboard_max_idx]}역 {deboard_max_value}명 하차')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.\n최대 승차 : 2호선 강남역 2209994명 승차\n최대 하차 : 2호선 강남역 2175932명 하차\n```\n:::\n:::\n\n\n## 1-2. 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint('1-2 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.')\n# 역별 유임승차자 비율 ndarray 만들기\nstationary_rate = stationary_board/total_board\n\n# 유임승차자 비율 큰 순서로 정렬한 인덱스\nsort_index = np.argsort(stationary_rate)[ : : -1]\n\n# 상위 10개역 출력\nfor i in range(10):\n    print(f'{i+1}. {station1[sort_index[i]]}역 유임승차자 비율 : {stationary_rate[sort_index[i]]}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1-2 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.\n1. 2호선 한양대역 유임승차자 비율 : 0.9556973033604169\n2. 공항철도 1호선 홍대입구역 유임승차자 비율 : 0.9471593106448806\n3. 2호선 홍대입구역 유임승차자 비율 : 0.94658480261284\n4. 경부선 서울역역 유임승차자 비율 : 0.9403566042189232\n5. 공항철도 1호선 마곡나루(서울식물원)역 유임승차자 비율 : 0.9400488818077928\n6. 9호선 신논현역 유임승차자 비율 : 0.9384016412930402\n7. 9호선 여의도역 유임승차자 비율 : 0.9373539462006335\n8. 6호선 한강진역 유임승차자 비율 : 0.9372195113990568\n9. 공항철도 1호선 디지털미디어시티역 유임승차자 비율 : 0.9338371458237441\n10. 공항철도 1호선 청라국제도시역 유임승차자 비율 : 0.9332706439591822\n```\n:::\n:::\n\n\n# 2. 지하철 시간대별 승하차 데이터 분석\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndata2 = []\nwith open('metro_time.csv', 'r', encoding='cp949') as f:\n    source2 = csv.reader(f, delimiter=',')\n    header2_1 = next(source2)\n    header2_2 = next(source2)\n    for row in source2:\n        data2.append(row)\n\n# 데이터 확인\nprint(header2_1)\nprint(header2_2)\nprint(data2[0])\n\n# 데이터 ndarray로 만들기\ndata_array2 = np.array(data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['사용월', '호선명', '역ID', '지하철역', '04:00:00~04:59:59', '', '05:00:00~05:59:59', '', '06:00:00~06:59:59', '', '07:00:00~07:59:59', '', '08:00:00~08:59:59', '', '09:00:00~09:59:59', '', '10:00:00~10:59:59', '', '11:00:00~11:59:59', '', '12:00:00~12:59:59', '', '13:00:00~13:59:59', '', '14:00:00~14:59:59', '', '15:00:00~15:59:59', '', '16:00:00~16:59:59', '', '17:00:00~17:59:59', '', '18:00:00~18:59:59', '', '19:00:00~19:59:59', '', '20:00:00~20:59:59', '', '21:00:00~21:59:59', '', '22:00:00~22:59:59', '', '23:00:00~23:59:59', '', '00:00:00~00:59:59', '', '01:00:00~01:59:59', '', '02:00:00~02:59:59', '', '03:00:00~03:59:59', '', '작업일시']\n['', '', '', '', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '승차', '하차', '']\n['2022-06', '1호선', '0150', '서울역', '646', '24', '8,433', '7,694', '12,608', '46,963', '39,233', '100,397', '65,106', '201,687', '54,833', '136,594', '54,970', '72,279', '65,919', '63,975', '73,911', '71,095', '75,158', '70,182', '62,452', '63,752', '83,128', '66,858', '94,518', '68,962', '144,662', '80,449', '194,098', '85,268', '97,875', '56,132', '69,808', '39,704', '76,345', '35,471', '51,224', '26,045', '20,385', '15,480', '158', '1,332', '1', '4', '0', '1', '0', '0', '2022-07-03 09:48:05']\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# 불러온 데이터 결측치 여부 확인\ncnt = 0\nfor row in range(len(data_array2)):\n    for i in range(len(data_array2[0])):\n        if ((data_array2[row][i] == '') or (data_array2[row][i] == np.NaN)):\n            cnt = cnt + 1\n            print(cnt, '번째 결측치',row,i)\n\nif cnt == 0:\n    print('결측치가 존재하지 않습니다.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n결측치가 존재하지 않습니다.\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# 같은 역에대한 데이터가 존재하는지 확인\n# 이름이 같지만 호선이 다른 경우 다른 역으로 표현함 (1호선 시청역과 2호선 시청역은 다름)\n# 호선 + 역 이름으로 역 리스트 생성\ncnt = 0\nstation2 = []\nfor row in range(len(data_array2)):\n    station_name2 = data_array2[row][1] + ' ' + data_array2[row][3]\n    if station_name2 in station2:\n        print(station_name2 +'이 겹칩니다.')\n    station2.append(station_name2)\nif cnt == 0:\n    print('호선과 역 이름이 동시에 겹치는 역이 없습니다.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n호선과 역 이름이 동시에 겹치는 역이 없습니다.\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# ndarray형태에서 ,때문에 인원들에 대한 요소값을 int 형태로 변경 불가\n# list를 만들어 ,를 지운 후 ndarray형태로 변경\ntime_board_mat = []\ntime_deboard_mat = []\nfor i in range(24):\n    time_board_list = []\n    time_deboard_list = []\n    for row in data2:\n        time_board_list.append(row[4+2*i].replace(',',''))\n        time_deboard_list.append(row[5+2*i].replace(',',''))\n    time_board_mat.append(time_board_list)\n    time_deboard_mat.append(time_deboard_list)\n\ntime_board_array = np.array(time_board_mat).astype(int)\ntime_deboard_array = np.array(time_deboard_mat).astype(int)\n```\n:::\n\n\n## 2-1. 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# 출근 시간대 승차인원\ntime_board_7to9 = time_board_array[3,:] + time_board_array[4,:]\n# 출근 시간대 승차인원이 적은 순으로 인덱스와 값 정렬\ntime_board_7to9_idx = np.argsort(time_board_7to9)\ntime_board_7to9_value = time_board_7to9[time_board_7to9_idx]\n\n# 출근 시간대 하차인원 정렬\ntime_deboard_7to9 = time_deboard_array[3,:] + time_deboard_array[4,:]\n# 출근 시간대 하차인원이 적은 순으로 인덱스와 값 정렬\ntime_deboard_7to9_idx = np.argsort(time_deboard_7to9)\ntime_deboard_7to9_value = time_deboard_7to9[time_deboard_7to9_idx]\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint('2-1 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.')\nprint(f'출근 시간대에 승차인원이 가장 많은 역 : {station2[time_board_7to9_idx[-1]]}역 {time_board_7to9_value[-1]}명 탑승')\nx_index = np.arange(len(time_board_7to9_idx))\nfig, ax = plt.subplots(figsize=(10,7))\nplt.bar(x_index,time_board_7to9_value,color = 'blue')\nplt.title(\"Board\")\nax.set_xlabel(\"Index of sorted stations\")\nax.set_ylabel(\"Number of person\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2-1 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.\n출근 시간대에 승차인원이 가장 많은 역 : 2호선 신림역 469127명 탑승\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](assignment_files/figure-html/cell-15-output-2.png){width=842 height=597}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint(f'출근 시간대에 하차인원이 가장 많은 역 : {station2[time_deboard_7to9_idx[-1]]}역 {time_deboard_7to9_value[-1]}명 하차')\nx_index = np.arange(len(time_deboard_7to9_idx))\nfig, ax = plt.subplots(figsize=(10,7))\nplt.bar(x_index,time_deboard_7to9_value,color = 'blue')\nplt.title(\"Deboard\")\nax.set_xlabel(\"Index of sorted stations\")\nax.set_ylabel(\"Number of person\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n출근 시간대에 하차인원이 가장 많은 역 : 7호선 가산디지털단지역 486420명 하차\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](assignment_files/figure-html/cell-16-output-2.png){width=842 height=597}\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprint(f'출근 시간대에 승차인원이 가장 많은 역 : {station2[time_board_7to9_idx[-1]]}역 {time_board_7to9_value[-1]}명 탑승')\nprint(f'출근 시간대에 하차인원이 가장 많은 역 : {station2[time_deboard_7to9_idx[-1]]}역 {time_deboard_7to9_value[-1]}명 하차')\nx_index = np.arange(len(time_deboard_7to9_idx))\nfig = plt.figure(figsize=(15, 6))\nax1 = fig.add_subplot(121)\nax1.bar(x_index,time_board_7to9_value,color = 'blue')\nax1.set_title(\"Board\")\nax1.set_xlabel(\"Index of sorted stations\")\nax1.set_ylabel(\"Number of person\")\nax2 = fig.add_subplot(122)\nax2.bar(x_index,time_deboard_7to9_value,color = 'blue')\nax2.set_title(\"Deboard\")\nax2.set_xlabel(\"Index of sorted stations\")\nax2.set_ylabel(\"Number of person\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n출근 시간대에 승차인원이 가장 많은 역 : 2호선 신림역 469127명 탑승\n출근 시간대에 하차인원이 가장 많은 역 : 7호선 가산디지털단지역 486420명 하차\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](assignment_files/figure-html/cell-17-output-2.png){width=1214 height=523}\n:::\n:::\n\n\n## 2-2. 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n#시간대 별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합\nsum_time_board = []\nsum_time_deboard = []\nfor i in range(24):\n    sum_time_board.append(sum(time_board_array[i,:]))\n    sum_time_deboard.append(sum(time_deboard_array[i,:]))\n\nsum_time_board_array = np.array(sum_time_board)\nsum_time_deboard_array = np.array(sum_time_deboard)\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nprint('2-2 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.')\nt_index = [t for t in range(4,28)]\nfig, ax = plt.subplots(figsize=(10,5))\nplt.title(\"Board & Deboard\")\nax.set_xlabel(\"Time\")\nax.set_ylabel(\"Number of person\")\nplt.plot(t_index,sum_time_board_array, label='board', color = 'blue', linewidth= '3')\nplt.plot(t_index,sum_time_deboard_array, label='deboard', color = 'red', linewidth= '3')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2-2 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<matplotlib.legend.Legend at 0x148266f50>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](assignment_files/figure-html/cell-19-output-3.png){width=812 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "assignment_files"
    ],
    "filters": [],
    "includes": {}
  }
}