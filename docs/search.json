[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "My Blog",
    "section": "",
    "text": "임동건 블로그입니다."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MyBlog",
    "section": "",
    "text": "프로젝트를 시작합니다!!!\n\n\n\n\n\n\n\n\n  \n\n\n\n\nData Load and Python\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 23, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nOpenAI DevDay, Opening Keynote 임동건\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nQuarto\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 4, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/yj story/index.html",
    "href": "posts/yj story/index.html",
    "title": "YuJeong’s first post",
    "section": "",
    "text": "OpenAI DevDay\nYuJeong’s first post 이 텍스트는 OpenAI의 개발자 대회(DevDay)에서 Sam Altman이 한 발표의 전문입니다. 그는 OpenAI가 지난 한 해 동안 이룬 성과들을 소개하고, 새로운 기능과 서비스를 발표했습니다. 발표 내용에는 ChatGPT의 ’low-key research preview’로부터 시작하여 GPT-4의 출시, 그리고 음성 및 시각 능력을 갖춘 ChatGPT, 그리고 DALL-E 3와 같은 세계에서 가장 진보된 이미지 모델까지 여러 발전이 포함되었습니다. 그는 또한 OpenAI가 어떻게 사람들의 일상 생활과 창의적 작업을 도와주고 있는지 여러 사례를 통해 보여주었습니다. 이어서 새로운 GPT-4 Turbo 모델, 기능 향상, 더 긴 컨텍스트 길이 지원, JSON 모드, 더 나은 세계 지식, 새로운 모달리티 지원 등을 발표했습니다. 이러한 개선은 개발자들이 더 쉽게 AI를 자신들의 앱과 서비스에 통합할 수 있도록 돕기 위함입니다.\n또한, 그는 Microsoft와의 깊은 협력 관계를 강조하며, Microsoft의 CEO인 Satya Nadella가 무대에 올라 두 회사 간의 파트너십과 AI의 미래에 대해 이야기했습니다. 발표의 끝부분에서는 개발자들이 쉽게 자신만의 ChatGPT 버전을 만들고 공유할 수 있는 GPTs라는 새로운 개념을 소개하며, 이를 통해 사용자들이 더 풍부하고 개인화된 경험을 할 수 있게 될 것이라고 설명했습니다.\n이 발표는 기술의 진보와 그것이 사회에 미치는 긍정적 영향에 대한 강한 낙관론을 내포하고 있습니다. OpenAI는 AI 기술을 통해 개인의 권한을 강화하고, 창의적인 작업을 돕는 것을 목표로 하고 있으며, 그들이 소개한 새로운 도구들은 개발자들에게 큰 가능성을 열어줄 것으로 보입니다. 이 발표는 AI 기술이 사람들의 삶에 가져올 변화를 두려워하기보다는 그것을 어떻게 활용하고, 우리 사회에 긍정적인 영향을 끼칠 수 있을지에 대해 고민하고 준비해야 함을 강조합니다. OpenAI가 앞으로도 사용자들의 피드백을 바탕으로 시스템을 지속적으로 업데이트하고, AI 기술이 일상 곳곳에 통합될 때 우리 모두가 요구할 때마다 ’수퍼파워’를 갖게 될 미래를 기대하며 발표를 마쳤습니다."
  },
  {
    "objectID": "posts/yj story/index.html#고유정-포스트",
    "href": "posts/yj story/index.html#고유정-포스트",
    "title": "YuJeong’s first post",
    "section": "고유정 포스트",
    "text": "고유정 포스트"
  },
  {
    "objectID": "posts/donggeon/index.html",
    "href": "posts/donggeon/index.html",
    "title": "OpenAI DevDay, Opening Keynote 임동건",
    "section": "",
    "text": "OpenAI DevDay, Opening Keynote\n\n\n정리\n\nGPT 4 Turbo 출시\n\n128,000 토큰 컨텍스트 (300페이지 이상의 텍스트에 해당하는 내용)\n함수 여러개 호출하기 편해짐\n23년 4월 까지의 데이터 최신화\n모델 개선\n\nGPT-4 turbo Vision API 출시\n음성합성 + 음성인식 개선\n\n파인튜닝 오픈\n\nGPT-3.5 파인튜닝 16k 버전 오픈\nGPT-4 파인튜닝은 일부 실험 접근 허용\n\nGPT-4 가격 인하\n\n인풋 토큰 : 1/3\n아웃풋 토큰 : 1/2\n\n\nGPTs 출시\n\n사용자 지정 버전의 GPT (chatbot 만들기 가능)\nGPT Store에 자신이 만든 앱을 통해 수익창출이 가능해짐\n\nAssistant API — API 개발을 쉽게 만들어 줌\n\n대화 내역 기반, 검색, 코드 실행, 함수 실행을 잘 활용할 수 있게 만듦\n\n\n\n\n\n생각\n\nGPT 공개 이후에 코딩 오류 수정시 엄청난 시간 절약을 할 수 있어 기술 개발을 위해 문턱을 낮춰주는 매우 좋은 서비스라고 생각했었다. 이런 기술 개발을 위한 문턱을 낮추는 일이 GPT 4 Turbo로 한 번 더 낮아진 것 같다는 생각이 들게 되었다. 특히 GPT Store를 통해 여러 아이디어를 가진 스타트업 기업들이 많이 생성될 것으로 예상이 된다. 따라서 앞으로는 어떤 지식이나 기술보다 사람들의 니즈를 잘 파악하는 것이 더 중요해질 것으로 생각된다.\n \n\n\n\n\n\nWriter : 임동건"
  },
  {
    "objectID": "posts/donggeon/index.html#임동건-포스트",
    "href": "posts/donggeon/index.html#임동건-포스트",
    "title": "Donggeon’s first post",
    "section": "임동건 포스트",
    "text": "임동건 포스트"
  },
  {
    "objectID": "posts/donggeon/index.html#정리",
    "href": "posts/donggeon/index.html#정리",
    "title": "Donggeon’s first post",
    "section": "",
    "text": "GPT 4 Turbo 출시\n\n128,000 토큰 컨텍스트 (300페이지 이상의 텍스트에 해당하는 내용)\n함수 여러개 호출하기 편해짐\n23년 4월 까지의 데이터 최신화\n모델 개선\n\nGPT-4 turbo Vision API 출시\n음성합성 + 음성인식 개선\n\n파인튜닝 오픈\n\nGPT-3.5 파인튜닝 16k 버전 오픈\nGPT-4 파인튜닝은 일부 실험 접근 허용\n\nGPT-4 가격 인하\n\n인풋 토큰 : 1/3\n아웃풋 토큰 : 1/2\n\n\nGPTs 출시\n\n사용자 지정 버전의 GPT (chatbot 만들기 가능)\nGPT Store에 자신이 만든 앱을 통해 수익창출이 가능해짐\n\nAssistant API — API 개발을 쉽게 만들어 줌\n\n대화 내역 기반, 검색, 코드 실행, 함수 실행을 잘 활용할 수 있게 만듦"
  },
  {
    "objectID": "posts/donggeon/index.html#생각",
    "href": "posts/donggeon/index.html#생각",
    "title": "Donggeon’s first post",
    "section": "",
    "text": "GPT 공개 이후에 코딩 오류 수정시 엄청난 시간 절약을 할 수 있어 기술 개발을 위해 문턱을 낮춰주는 매우 좋은 서비스라고 생각했었다. 이런 기술 개발을 위한 문턱을 낮추는 일이 GPT 4 Turbo로 한 번 더 낮아진 것 같다는 생각이 들게 되었다. 특히 GPT Store를 통해 여러 아이디어를 가진 스타트업 기업들이 많이 생성될 것으로 예상이 된다. 따라서 앞으로는 어떤 지식이나 기술보다 사람들의 니즈를 잘 파악하는 것이 더 중요해질 것으로 생각된다."
  },
  {
    "objectID": "posts/donggeon/index.html#writer-임동건",
    "href": "posts/donggeon/index.html#writer-임동건",
    "title": "OpenAI DevDay, Opening Keynote 임동건",
    "section": "Writer : 임동건",
    "text": "Writer : 임동건"
  },
  {
    "objectID": "posts/start_quarto/index.html",
    "href": "posts/start_quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "Quarto의 장점\n\n123"
  },
  {
    "objectID": "about.html#team-members",
    "href": "about.html#team-members",
    "title": "CGInside alpha",
    "section": "Team Members",
    "text": "Team Members\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n노희찬\n고유정\n임동건\n\n\n클라우드 아키텍트\n데이터 사이언티스트\n데이터 사이언티스트\n\n\n풀스택 개발자\n데이터 분석 컨설턴트\n솔루션 개발자"
  },
  {
    "objectID": "posts/data/assignment.html",
    "href": "posts/data/assignment.html",
    "title": "Data Load and Python",
    "section": "",
    "text": "데이터 로드와 파이썬 되는지 확인 # Data Load and Python\n# 라이브러리 파일 실행\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport csv\nimport os\npath = '/Users/limdonggeon/Desktop'"
  },
  {
    "objectID": "posts/data/assignment.html#총-승차인원유임승차무임승차이-가장-많은-역과-그-역의-승차인원을-출력하고-총-하차인원유임하차무임하차이-가장-많은-역과-그-역의-하차인원을-출력하세요.",
    "href": "posts/data/assignment.html#총-승차인원유임승차무임승차이-가장-많은-역과-그-역의-승차인원을-출력하고-총-하차인원유임하차무임하차이-가장-많은-역과-그-역의-하차인원을-출력하세요.",
    "title": "Data Load and Python",
    "section": "1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.",
    "text": "1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.\n\nprint('1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.')\n# 역별 승차인원 ndarray 만들기\ntotal_board = stationary_board + free_board\n# 최대 승차인원 값과 인덱스 찾기\nboard_max_idx = np.argmax(total_board)\nboard_max_value = total_board[board_max_idx]\nprint(f'최대 승차 : {station1[board_max_idx]}역 {board_max_value}명 승차')\n\n# 역별 하차인원 ndarray 만들기\ntotal_deboard = stationary_deboard + free_deboard\n# 최대 하차인원 값과 인덱스 찾기\ndeboard_max_idx = np.argmax(total_deboard)\ndeboard_max_value = total_deboard[deboard_max_idx]\nprint(f'최대 하차 : {station1[deboard_max_idx]}역 {deboard_max_value}명 하차')\n\n1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.\n최대 승차 : 2호선 강남역 2209994명 승차\n최대 하차 : 2호선 강남역 2175932명 하차"
  },
  {
    "objectID": "posts/data/assignment.html#유임승차자의-비율유임승차총-승차인원이-가장-높은-상위-10개-역과-각각의-유임승차자-비율을-구하세요.",
    "href": "posts/data/assignment.html#유임승차자의-비율유임승차총-승차인원이-가장-높은-상위-10개-역과-각각의-유임승차자-비율을-구하세요.",
    "title": "Data Load and Python",
    "section": "1-2. 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.",
    "text": "1-2. 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.\n\nprint('1-2 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.')\n# 역별 유임승차자 비율 ndarray 만들기\nstationary_rate = stationary_board/total_board\n\n# 유임승차자 비율 큰 순서로 정렬한 인덱스\nsort_index = np.argsort(stationary_rate)[ : : -1]\n\n# 상위 10개역 출력\nfor i in range(10):\n    print(f'{i+1}. {station1[sort_index[i]]}역 유임승차자 비율 : {stationary_rate[sort_index[i]]}')\n\n1-2 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.\n1. 2호선 한양대역 유임승차자 비율 : 0.9556973033604169\n2. 공항철도 1호선 홍대입구역 유임승차자 비율 : 0.9471593106448806\n3. 2호선 홍대입구역 유임승차자 비율 : 0.94658480261284\n4. 경부선 서울역역 유임승차자 비율 : 0.9403566042189232\n5. 공항철도 1호선 마곡나루(서울식물원)역 유임승차자 비율 : 0.9400488818077928\n6. 9호선 신논현역 유임승차자 비율 : 0.9384016412930402\n7. 9호선 여의도역 유임승차자 비율 : 0.9373539462006335\n8. 6호선 한강진역 유임승차자 비율 : 0.9372195113990568\n9. 공항철도 1호선 디지털미디어시티역 유임승차자 비율 : 0.9338371458237441\n10. 공항철도 1호선 청라국제도시역 유임승차자 비율 : 0.9332706439591822"
  },
  {
    "objectID": "posts/data/assignment.html#출근-시간대7시9시-승차인원과-하차인원-각각에-대해-정렬된-barplot을-그리고-인원이-가장-많은-역과-인원을-각각-찾으세요.",
    "href": "posts/data/assignment.html#출근-시간대7시9시-승차인원과-하차인원-각각에-대해-정렬된-barplot을-그리고-인원이-가장-많은-역과-인원을-각각-찾으세요.",
    "title": "Data Load and Python",
    "section": "2-1. 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.",
    "text": "2-1. 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.\n\n# 출근 시간대 승차인원\ntime_board_7to9 = time_board_array[3,:] + time_board_array[4,:]\n# 출근 시간대 승차인원이 적은 순으로 인덱스와 값 정렬\ntime_board_7to9_idx = np.argsort(time_board_7to9)\ntime_board_7to9_value = time_board_7to9[time_board_7to9_idx]\n\n# 출근 시간대 하차인원 정렬\ntime_deboard_7to9 = time_deboard_array[3,:] + time_deboard_array[4,:]\n# 출근 시간대 하차인원이 적은 순으로 인덱스와 값 정렬\ntime_deboard_7to9_idx = np.argsort(time_deboard_7to9)\ntime_deboard_7to9_value = time_deboard_7to9[time_deboard_7to9_idx]\n\n\nprint('2-1 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.')\nprint(f'출근 시간대에 승차인원이 가장 많은 역 : {station2[time_board_7to9_idx[-1]]}역 {time_board_7to9_value[-1]}명 탑승')\nx_index = np.arange(len(time_board_7to9_idx))\nfig, ax = plt.subplots(figsize=(10,7))\nplt.bar(x_index,time_board_7to9_value,color = 'blue')\nplt.title(\"Board\")\nax.set_xlabel(\"Index of sorted stations\")\nax.set_ylabel(\"Number of person\")\nplt.show()\n\n2-1 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.\n출근 시간대에 승차인원이 가장 많은 역 : 2호선 신림역 469127명 탑승\n\n\n\n\n\n\nprint(f'출근 시간대에 하차인원이 가장 많은 역 : {station2[time_deboard_7to9_idx[-1]]}역 {time_deboard_7to9_value[-1]}명 하차')\nx_index = np.arange(len(time_deboard_7to9_idx))\nfig, ax = plt.subplots(figsize=(10,7))\nplt.bar(x_index,time_deboard_7to9_value,color = 'blue')\nplt.title(\"Deboard\")\nax.set_xlabel(\"Index of sorted stations\")\nax.set_ylabel(\"Number of person\")\nplt.show()\n\n출근 시간대에 하차인원이 가장 많은 역 : 7호선 가산디지털단지역 486420명 하차\n\n\n\n\n\n\nprint(f'출근 시간대에 승차인원이 가장 많은 역 : {station2[time_board_7to9_idx[-1]]}역 {time_board_7to9_value[-1]}명 탑승')\nprint(f'출근 시간대에 하차인원이 가장 많은 역 : {station2[time_deboard_7to9_idx[-1]]}역 {time_deboard_7to9_value[-1]}명 하차')\nx_index = np.arange(len(time_deboard_7to9_idx))\nfig = plt.figure(figsize=(15, 6))\nax1 = fig.add_subplot(121)\nax1.bar(x_index,time_board_7to9_value,color = 'blue')\nax1.set_title(\"Board\")\nax1.set_xlabel(\"Index of sorted stations\")\nax1.set_ylabel(\"Number of person\")\nax2 = fig.add_subplot(122)\nax2.bar(x_index,time_deboard_7to9_value,color = 'blue')\nax2.set_title(\"Deboard\")\nax2.set_xlabel(\"Index of sorted stations\")\nax2.set_ylabel(\"Number of person\")\nplt.show()\n\n출근 시간대에 승차인원이 가장 많은 역 : 2호선 신림역 469127명 탑승\n출근 시간대에 하차인원이 가장 많은 역 : 7호선 가산디지털단지역 486420명 하차"
  },
  {
    "objectID": "posts/data/assignment.html#각-시간대별-모든-지하철역에서의-총-승차인원의-합과-총-하차인원의-합을-구하고-x축을-시간-y축을-인원으로-하는-그래프로-나타내시오.",
    "href": "posts/data/assignment.html#각-시간대별-모든-지하철역에서의-총-승차인원의-합과-총-하차인원의-합을-구하고-x축을-시간-y축을-인원으로-하는-그래프로-나타내시오.",
    "title": "Data Load and Python",
    "section": "2-2. 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.",
    "text": "2-2. 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.\n\n#시간대 별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합\nsum_time_board = []\nsum_time_deboard = []\nfor i in range(24):\n    sum_time_board.append(sum(time_board_array[i,:]))\n    sum_time_deboard.append(sum(time_deboard_array[i,:]))\n\nsum_time_board_array = np.array(sum_time_board)\nsum_time_deboard_array = np.array(sum_time_deboard)\n\n\nprint('2-2 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.')\nt_index = [t for t in range(4,28)]\nfig, ax = plt.subplots(figsize=(10,5))\nplt.title(\"Board & Deboard\")\nax.set_xlabel(\"Time\")\nax.set_ylabel(\"Number of person\")\nplt.plot(t_index,sum_time_board_array, label='board', color = 'blue', linewidth= '3')\nplt.plot(t_index,sum_time_deboard_array, label='deboard', color = 'red', linewidth= '3')\nplt.legend()\n\n2-2 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.\n\n\n&lt;matplotlib.legend.Legend at 0x144302560&gt;"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html",
    "href": "dev_posts/BaseTable/MakeBaseTable.html",
    "title": "Base Table 만들기",
    "section": "",
    "text": "# 필요 라이브러리 설치\nimport numpy as np\nimport pandas as pd\n\n\n# 데이터 load\ndata = pd.read_csv('/Users/limdonggeon/Desktop/KPMG/Work/Law/data/main_data.csv')\n\n/var/folders/fs/zfypqyv96hs22x794hfx0ycm0000gn/T/ipykernel_18711/235597709.py:2: DtypeWarning:\n\nColumns (2,4,5,8,13,16,17,18,19,24) have mixed types. Specify dtype option on import or set low_memory=False.\n\n\n\n\ndata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 861719 entries, 0 to 861718\nData columns (total 25 columns):\n #   Column     Non-Null Count   Dtype  \n---  ------     --------------   -----  \n 0   소관부처명      861666 non-null  object \n 1   법령명        861702 non-null  object \n 2   법령구분       861704 non-null  object \n 3   조번호        861129 non-null  object \n 4   항번호        666590 non-null  object \n 5   호번호        504904 non-null  object \n 6   조문제목       805869 non-null  object \n 7   조문         848856 non-null  object \n 8   사무판단       767124 non-null  object \n 9   사무판단근거     700871 non-null  object \n 10  사무명        60113 non-null   object \n 11  수행주체       60116 non-null   object \n 12  사무유형       60071 non-null   object \n 13  위임사무판단     761139 non-null  object \n 14  위임근거규정     5311 non-null    object \n 15  수임기관       4416 non-null    object \n 16  특행기관       93089 non-null   object \n 17  재위임사무판단    702502 non-null  object \n 18  재위임근거규정    54 non-null      object \n 19  재수임기관      13 non-null      object \n 20  위탁사무판단     758703 non-null  float64\n 21  위탁근거규정     3975 non-null    object \n 22  수탁기관       3952 non-null    object \n 23  사무유형(소분류)  60114 non-null   object \n 24  기타         3 non-null       object \ndtypes: float64(1), object(24)\nmemory usage: 164.4+ MB"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#라이브러리-설치-및-데이터-불러오기",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#라이브러리-설치-및-데이터-불러오기",
    "title": "Base Table 만들기",
    "section": "",
    "text": "# 필요 라이브러리 설치\nimport numpy as np\nimport pandas as pd\n\n\n# 데이터 load\ndata = pd.read_csv('/Users/limdonggeon/Desktop/KPMG/Work/Law/data/main_data.csv')\n\n/var/folders/fs/zfypqyv96hs22x794hfx0ycm0000gn/T/ipykernel_18711/235597709.py:2: DtypeWarning:\n\nColumns (2,4,5,8,13,16,17,18,19,24) have mixed types. Specify dtype option on import or set low_memory=False.\n\n\n\n\ndata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 861719 entries, 0 to 861718\nData columns (total 25 columns):\n #   Column     Non-Null Count   Dtype  \n---  ------     --------------   -----  \n 0   소관부처명      861666 non-null  object \n 1   법령명        861702 non-null  object \n 2   법령구분       861704 non-null  object \n 3   조번호        861129 non-null  object \n 4   항번호        666590 non-null  object \n 5   호번호        504904 non-null  object \n 6   조문제목       805869 non-null  object \n 7   조문         848856 non-null  object \n 8   사무판단       767124 non-null  object \n 9   사무판단근거     700871 non-null  object \n 10  사무명        60113 non-null   object \n 11  수행주체       60116 non-null   object \n 12  사무유형       60071 non-null   object \n 13  위임사무판단     761139 non-null  object \n 14  위임근거규정     5311 non-null    object \n 15  수임기관       4416 non-null    object \n 16  특행기관       93089 non-null   object \n 17  재위임사무판단    702502 non-null  object \n 18  재위임근거규정    54 non-null      object \n 19  재수임기관      13 non-null      object \n 20  위탁사무판단     758703 non-null  float64\n 21  위탁근거규정     3975 non-null    object \n 22  수탁기관       3952 non-null    object \n 23  사무유형(소분류)  60114 non-null   object \n 24  기타         3 non-null       object \ndtypes: float64(1), object(24)\nmemory usage: 164.4+ MB"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#설명변수소관부처명-법령명-조번호-항번호-호번호-조문제목-조문가-모두-결측치인-행-삭제",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#설명변수소관부처명-법령명-조번호-항번호-호번호-조문제목-조문가-모두-결측치인-행-삭제",
    "title": "Base Table 만들기",
    "section": "1) 설명변수(소관부처명, 법령명, 조번호, 항번호, 호번호, 조문제목, 조문)가 모두 결측치인 행 삭제",
    "text": "1) 설명변수(소관부처명, 법령명, 조번호, 항번호, 호번호, 조문제목, 조문)가 모두 결측치인 행 삭제"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#section",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#section",
    "title": "Base Table 만들기",
    "section": "",
    "text": "def x_null_drop(df): \n    select_column = ['소관부처명', '법령명', '조번호', '항번호', '호번호', '조문제목', '조문']\n    delete_row_idx = list(df[df[select_column].isnull().all(axis = 1)].index)\n    delete_row_idx.sort(reverse = True)\n    for i in delete_row_idx:\n        df = df.drop([i],axis = 0)\n    return df\n\n\ndata = x_null_drop(data)"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#소관부처명-결측치-처리",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#소관부처명-결측치-처리",
    "title": "Base Table 만들기",
    "section": "2) 소관부처명 결측치 처리",
    "text": "2) 소관부처명 결측치 처리\n\n소관부처명 결측치: 45개\n동일한 법령에 대해서는 동일한 소관부처를 가짐\n이에, 다른 행 중 동일한 법령을 지닌 소관부처 파악 후 결측치 채워줌\n\n\ndef dep_law_preprocessing(df):\n        # department_idx: '법령명'은 채워져있는데 '소관부처명'은 채워져있지 않은 행의 index\n        department_idx = df[df['소관부처명'].isnull() & df['법령명'].notnull()].index\n        # department_name_list: '소관부처명'이 채워져야할 법령명\n        department_name_list = df[df['소관부처명'].isnull() & df['법령명'].notnull()]['법령명'].unique()\n\n        department_dic = {}\n        department_dic['건설산업기본법'] = '국토교통부'\n        department_dic['보건범죄단속에관한특별조치법시행령'] = '보건복지부'\n        department_dic['항로표지법'] = '해양수산부'\n        department_dic['수산자원관리법'] = '해양수산부'\n        department_dic['연안관리법'] = '해양수산부'\n        department_dic['야생생물 보호 및 관리에 관한 법률'] = '환경부'\n\n        for i in range(len(department_idx)):\n                for j in range(len(department_name_list)):\n                        df.loc[department_idx[i],'소관부처명'] = department_dic[department_name_list[j]]\n\n        # '소관부처명', '법령명' 모두 채워져있지 않은 행\n        \n        return df\n\n\ndata = dep_law_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#법령명-결측치-처리",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#법령명-결측치-처리",
    "title": "Base Table 만들기",
    "section": "3) 법령명 결측치 처리",
    "text": "3) 법령명 결측치 처리\n\n조, 항, 조문 통해 법령명 찾아 삽입\n\n\ndef law_name_preprocessing(df):\n    idx = 14168\n    df.loc[idx,'소관부처명'] = '고용노동부'\n    df.loc[idx,'법령명'] = '근로자퇴직급여 보장법'\n    df.loc[idx,'법령구분'] = 1\n\n    idx = 198519\n    df.loc[idx,'소관부처명'] = '국토교통부'\n    df.loc[idx,'법령명'] = '택수운송사업의 발전에 관한 법률'\n    df.loc[idx,'법령구분'] = 1\n    df.loc[idx,'조번호'] = 11\n    df.loc[idx,'항번호'] = 1\n    df.loc[idx,'조문제목'] = '감차계획의 수립 및 시행 등'\n    idx = 686791\n    df.loc[idx,'소관부처명'] = '해양수산부'\n    df.loc[idx,'법령명'] = '수산업ㆍ어촌 공익기능 증진을 위한 직접지불제도 운영에 관한 법률'\n\n    idx = 708300\n    df.loc[idx,'소관부처명'] = '해양수산부'\n    df.loc[idx,'법령명'] = '해양공간계획 및 관리에 관한 법률'\n\n    idx = 708831\n    df.loc[idx,'소관부처명'] = '해양수산부'\n    df.loc[idx,'법령명'] = '해양폐기물 및 해양오염퇴적물 관리법'\n\n    idx = 766079\n    df.loc[idx,'소관부처명'] = '행정안전부'\n    df.loc[idx,'법령명'] = '새마을금고법'\n\n    idx = 859679\n    df.loc[idx,'소관부처명'] = '환경부'\n    df.loc[idx,'법령명'] = '미세먼지 저감 및 관리에 관한 특별법'\n\n    idx = 859692\n    df.loc[idx,'소관부처명'] = '환경부'\n    df.loc[idx,'법령명'] = '미세먼지 저감 및 관리에 관한 특별법'\n\n    idx = 859755\n    df.loc[idx,'소관부처명'] = '환경부'\n    df.loc[idx,'법령명'] = '미세먼지 저감 및 관리에 관한 특별법'\n    \n    return df\n\n\ndata = law_name_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#법령구분-처리",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#법령구분-처리",
    "title": "Base Table 만들기",
    "section": "4) 법령구분 처리",
    "text": "4) 법령구분 처리\n\n법령구분 결측치 처리\n법령구분 자료형 int로 통일\n\n\ndef law_category_preprocessing(df):\n    # '법령구분'이 결측치인 행들의 index\n    null_idx = df[df['법령구분'].isnull()].index\n    # 국가법령정보센터 확인 결과, 결측치인 모든 행들은 법률, 즉 '1'에 해당\n    for i in null_idx:\n        df.loc[i,'법령구분'] = 1\n    \n    # 국가법령정보센터 확인 결과, '법령구분'이 공백으로 되어있는 행은 시행령, 즉 '2'에 해당\n    df.loc[df['법령구분']==' ', \"법령구분\"] = 2\n\n    # 법령구분 자료형 통일\n    df['법령구분'] = df['법령구분'].astype('int64')\n\n    return df\n\n\ndata = law_category_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#사무판단-처리",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#사무판단-처리",
    "title": "Base Table 만들기",
    "section": "5) 사무판단 처리",
    "text": "5) 사무판단 처리\n\n’ ’ -&gt; nan, ‘0’ -&gt; 0 , ‘1’ -&gt; 1, ‘0 1’ -&gt; 2 float 형태로 변환\n\n\ndef decision_preprocessing(df):\n    # 표기방식 통일\n    idx_nan = df[(df['사무판단'] == ' ')].index #idx_nan: '사무판단'이 nan인 행의 index\n    for i in idx_nan:\n        df.loc[i,'사무판단'] = np.nan\n    idx_0 = df[(df['사무판단'] == '0')].index #idx_0: '사무판단'이 '0'인 행의 index\n    for i in idx_0:\n        df.loc[i,'사무판단'] = 0\n    idx_1 = df[(df['사무판단'] == '1')].index #idx_1: '사무판단'이 '1'인 행의 index\n    for i in idx_1:\n        df.loc[i,'사무판단'] = 1\n    idx_2 = df[(df['사무판단'] == '0 1')].index #idx_2: '사무판단'이 '0 1'인 행의 index\n    for i in idx_2:\n        df.loc[i,'사무판단'] = 2\n\n    # 오류 행 삭제\n    ## 경우1: 사무가 아님에도 사무 유형이 분류된 경우\n    delete_0_idx = list((df[(df['사무판단'] == 0)  & (df['사무유형(소분류)'].notna())]).index)\n    df = df.drop(delete_0_idx, axis = 0)\n    \n    ## 경우2: 사무임에도 사무 유형이 분류되지 않은 경우\n    delete_1_idx1 = list((df[(df['사무판단'] == 1)  & (df['사무유형'].isnull())]).index)\n    df = df.drop(delete_1_idx1, axis = 0)\n    \n    delete_1_idx2 = list((df[(df['사무판단'] == 1)  & (df['사무유형(소분류)'].isnull())]).index)\n    df = df.drop(delete_1_idx2, axis = 0)\n\n    # 결측행 처리\n    ## 경우1: 사무 유형이 분류된 경우 =&gt; '1'로 채움\n    change_1_idx = df[(df['사무판단'].isnull())  & (df['사무유형'].notna()) & (df['사무유형(소분류)'].notna())].index\n    df.loc[change_1_idx, '사무판단'] = 1\n    \n    # 경우2: 사무 유형이 분류되지 않은 경우 =&gt; '0'으로 채움\n    change_0_idx = df[(df['사무판단'].isnull())  & (df['사무유형'].isnull()) & (df['사무유형(소분류)'].isnull())].index\n    df.loc[change_0_idx,'사무판단'] = 0\n    \n    # 자료형 통일\n    df['사무판단'] = df['사무판단'].astype('int64')\n\n    return df\n\n\ndata = decision_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#소관부처명-공백-처리",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#소관부처명-공백-처리",
    "title": "Base Table 만들기",
    "section": "6) 소관부처명 공백 처리",
    "text": "6) 소관부처명 공백 처리\n\ndef blank_preprocessing(df):\n    df.loc[df['소관부처명']==\"교육부,\\n고용노동부\", \"소관부처명\"] = '고용노동부,교육부'\n    df.loc[df['소관부처명']==\"과학기술정보통신부, \\n교육부\", \"소관부처명\"] = '과학기술정보통신부,교육부'\n    df.loc[df['소관부처명']==\"교육부,\\n과학기술정보통신부\", \"소관부처명\"] = '과학기술정보통신부,교육부'\n    return df\n\n\ndata = blank_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/BaseTable/MakeBaseTable.html#조문-조문-제목-결측치-처리",
    "href": "dev_posts/BaseTable/MakeBaseTable.html#조문-조문-제목-결측치-처리",
    "title": "Base Table 만들기",
    "section": "7) 조문, 조문 제목 결측치 처리",
    "text": "7) 조문, 조문 제목 결측치 처리\n\n조문, 조문 제목 null값이면 ’0’으로 채움\n\n\ndef law_preprocessing(df):\n    df.loc[df['조문제목'].isna(), '조문제목'] = '0'\n    df.loc[df['조문'].isna(), '조문'] = '0'\n    return df\n\n\ndata = law_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html",
    "href": "dev_posts/EDA/BaseTable2_EDA.html",
    "title": "Base Table을 활용한 EDA",
    "section": "",
    "text": "BaseTable_2.csv를 활용한 EDA"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html#라이브러리-설치-및-데이터-불러오기",
    "href": "dev_posts/EDA/BaseTable2_EDA.html#라이브러리-설치-및-데이터-불러오기",
    "title": "Base Table을 활용한 EDA",
    "section": "0. 라이브러리 설치 및 데이터 불러오기",
    "text": "0. 라이브러리 설치 및 데이터 불러오기\n\n# 필요 라이브러리 설치\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nfrom matplotlib import rc\n%matplotlib inline\n\nrc('font', family='AppleGothic')\nplt.rcParams['axes.unicode_minus'] = False\n\n\n# 데이터 load\ndata = pd.read_csv('/Users/limdonggeon/Desktop/KPMG/Work/Law/data/BaseTable_2.csv')\n\n/var/folders/fs/zfypqyv96hs22x794hfx0ycm0000gn/T/ipykernel_19000/3796171076.py:2: DtypeWarning:\n\nColumns (4,5,13,16,17,18,19,24) have mixed types. Specify dtype option on import or set low_memory=False.\n\n\n\n\ndata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 861624 entries, 0 to 861623\nData columns (total 25 columns):\n #   Column     Non-Null Count   Dtype  \n---  ------     --------------   -----  \n 0   소관부처명      861624 non-null  object \n 1   법령명        861624 non-null  object \n 2   법령구분       861624 non-null  int64  \n 3   조번호        861043 non-null  object \n 4   항번호        666511 non-null  object \n 5   호번호        504874 non-null  object \n 6   조문제목       861624 non-null  object \n 7   조문         861624 non-null  object \n 8   사무판단       861624 non-null  int64  \n 9   사무판단근거     700810 non-null  object \n 10  사무명        60068 non-null   object \n 11  수행주체       60069 non-null   object \n 12  사무유형       60026 non-null   object \n 13  위임사무판단     761044 non-null  object \n 14  위임근거규정     5292 non-null    object \n 15  수임기관       4398 non-null    object \n 16  특행기관       93064 non-null   object \n 17  재위임사무판단    702426 non-null  object \n 18  재위임근거규정    53 non-null      object \n 19  재수임기관      13 non-null      object \n 20  위탁사무판단     758608 non-null  float64\n 21  위탁근거규정     3970 non-null    object \n 22  수탁기관       3943 non-null    object \n 23  사무유형(소분류)  60026 non-null   object \n 24  기타         3 non-null       object \ndtypes: float64(1), int64(2), object(22)\nmemory usage: 164.3+ MB"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html#사무판단-개수-파악",
    "href": "dev_posts/EDA/BaseTable2_EDA.html#사무판단-개수-파악",
    "title": "Base Table을 활용한 EDA",
    "section": "1) 사무판단 개수 파악",
    "text": "1) 사무판단 개수 파악\n\n사무판단 종류: 3개\n\n사무판단이 0인 경우 : 801598개\n사무판단이 1인 경우 : 60023개\n사무판단이 2인 경우 : 3개\n\n사무판단이 2인 경우 빼고 0과 1인 경우만 비교하기\n\n\ndef judgment_graph(df):\n    # 전체 갯수\n    N = len(df)\n    \n    # 0의 비율, 1의 비율 계산하기\n    ratio_0 = (len(df[df['사무판단'] == 0]))/N *100\n    print(f\" 0의 비율 : {ratio_0}\")\n    ratio_1 = (len(df[df['사무판단'] == 1]))/N *100\n    print(f\" 1의 비율 : {ratio_1}\")\n    \n    # pie chart 생성\n    ratio = [ratio_0, ratio_1]\n    labels = [0,1]\n    explode = [0, 0.10]\n    colors = sns.color_palette('pastel')[3:5]\n    plt.pie(ratio, colors = colors, autopct='%.0f%%', startangle= 120, explode=explode)\n    plt.legend(['사무가 아니다', '사무이다'], bbox_to_anchor=(1.3, 1))\n    plt.title('\\n\\n 사무판단 비율 \\n')\n    plt.show()\n\n\njudgment_graph(data)\n\n 0의 비율 : 93.03338811360872\n 1의 비율 : 6.966263706674837"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html#소관부처명에-따른-사무판단",
    "href": "dev_posts/EDA/BaseTable2_EDA.html#소관부처명에-따른-사무판단",
    "title": "Base Table을 활용한 EDA",
    "section": "2) 소관부처명에 따른 사무판단",
    "text": "2) 소관부처명에 따른 사무판단\n\n소관부처명의 종류 : 122개\n사무가 가장 많은 5개 소관부처명 파악\n사무 비율이 가장 큰 5개 소관부처명 파악\n\n\n사무가 가장 많은 소관부처명 파악\n\ndef num_department_judgment_graph(df):\n    # 각 소관부처명 별 사무판단 갯수 파악\n    department_judgment = []\n    for ii in df['소관부처명'].unique():\n        department_count_0 = len(df.loc[(df['소관부처명']==ii) & (df['사무판단']==0)])\n        department_count_1 = len(df.loc[(df['소관부처명']==ii) & (df['사무판단']==1)])\n        # [1인 갯수, 0인 갯수, 1인 비율, 소관부처명]\n        department_judgment.append([department_count_1, department_count_0, department_count_1/(department_count_0+department_count_1), ii])\n    \n    # 사무가 가장 많은 소관부처명 파악\n    department_judgment.sort(key=lambda x:x[0], reverse = True)\n    \n    num_department_judgment = []\n    num_department = []\n    for i in range(len(department_judgment)):\n        num_department_judgment.append(department_judgment[i][0])\n        num_department.append(department_judgment[i][3])\n        \n    # 사무가 많은 소관부처명 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    plt.bar(range(len(num_department_judgment)), num_department_judgment, color=colors)\n    plt.title('\\n\\n\\n 소관부처별 사무판단 개수 파악\\n')\n    plt.ylabel('개수')\n    plt.xlim([-1,len(num_department_judgment)])\n    plt.xticks([])\n    plt.ylim([0,6000]);\n    plt.yticks(np.arange(0, 6000, step=1000));\n    \n    # 사무가 가장 많은 소관부처명 5개 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    bar = plt.bar(range(5), num_department_judgment[:5], color=colors)\n    plt.title('\\n\\n\\n 소관부처별 사무판단 Top5 개수 파악\\n')\n    plt.ylabel('개수')\n    plt.xlim([-0.5,4.5])\n    plt.xticks(np.arange(0, 5, 1), labels = [num_department[0],num_department[1],num_department[2],num_department[3],num_department[4]])\n    plt.ylim([0,6000]);\n    plt.yticks(np.arange(0, 6000, step=1000));\n    for rect in bar:\n        height = rect.get_height()\n        plt.text(rect.get_x() + rect.get_width()/2.0, height, '%d' % height, ha='center', va='bottom', size = 10)\n\n\nnum_department_judgment_graph(data)"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html#section-1",
    "href": "dev_posts/EDA/BaseTable2_EDA.html#section-1",
    "title": "Base Table을 활용한 EDA",
    "section": "",
    "text": "사무비율이 가장 큰 소관부처명 파악\n\ndef ratio_department_judgment_graph(df):\n    # 각 소관부처명 별 사무판단 갯수 파악\n    department_judgment = []\n    for ii in df['소관부처명'].unique():\n        department_count_0 = len(df.loc[(df['소관부처명']==ii) & (df['사무판단']==0)])\n        department_count_1 = len(df.loc[(df['소관부처명']==ii) & (df['사무판단']==1)])\n        # [1인 갯수, 0인 갯수, 1인 비율, 소관부처명]\n        department_judgment.append([department_count_1, department_count_0, department_count_1/(department_count_0+department_count_1), ii])\n    \n    # 사무비율이 가장 큰 소관부처명 파악\n    department_judgment.sort(key=lambda x:x[2], reverse = True)\n    \n    ratio_department_judgment = []\n    ratio_department = []\n    for i in range(len(department_judgment)):\n        ratio_department_judgment.append(department_judgment[i][2])\n        ratio_department.append(department_judgment[i][3])\n        \n    # 사무가 많은 소관부처명 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    plt.bar(range(len(ratio_department_judgment)), ratio_department_judgment, color=colors)\n    plt.title('\\n\\n\\n 소관부처별 사무판단 비율 파악\\n')\n    plt.ylabel('비율')\n    plt.xlim([-1,len(ratio_department_judgment)])\n    plt.xticks([])\n    plt.ylim([0,0.4]);\n    plt.yticks(np.arange(0, 0.5, step=0.1));\n    \n    # 사무가 가장 많은 소관부처명 5개 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    bar = plt.bar(range(5), ratio_department_judgment[:5], color=colors)\n    plt.title('\\n\\n\\n 소관부처별 사무판단 Top5 비율 파악\\n')\n    plt.ylabel('비율')\n    plt.xlim([-0.5,4.5])\n    plt.xticks(np.arange(0, 5, 1), labels = [ratio_department[0].replace(',','\\n'),ratio_department[1].replace(',','\\n'),ratio_department[2].replace(',','\\n'),ratio_department[3].replace(',','\\n'),ratio_department[4].replace(',','\\n')])\n    plt.ylim([0,0.4]);\n    plt.yticks(np.arange(0, 0.5, step=0.1));\n    for rect in bar:\n        height = rect.get_height()\n        plt.text(rect.get_x() + rect.get_width()/2.0, height, '%.3f' % height, ha='center', va='bottom', size = 10)\n\n\nratio_department_judgment_graph(data)"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html#법령명에-따른-사무판단",
    "href": "dev_posts/EDA/BaseTable2_EDA.html#법령명에-따른-사무판단",
    "title": "Base Table을 활용한 EDA",
    "section": "3) 법령명에 따른 사무판단",
    "text": "3) 법령명에 따른 사무판단\n\n법령명의 종류 : 4324개\n사무가 가장 많은 5개 법령명 파악\n사무 비율이 가장 큰 5개 법령명 파악\n\n\n사무가 가장 많은 법령명 파악\n\ndef num_lawname_judgment_graph(df):\n    # 각 법령명 별 사무판단 갯수 파악\n    lawname_judgment = []\n    for ii in df['법령명'].unique():\n        lawname_count_0 = len(df.loc[(df['법령명']==ii) & (df['사무판단']==0)])\n        lawname_count_1 = len(df.loc[(df['법령명']==ii) & (df['사무판단']==1)])\n        # [1인 갯수, 0인 갯수, 1인 비율, 법령명]\n        lawname_judgment.append([lawname_count_1, lawname_count_0, lawname_count_1/(lawname_count_0+lawname_count_1), ii])\n    \n    # 사무가 가장 많은 법령명 파악\n    lawname_judgment.sort(key=lambda x:x[0], reverse = True)\n    \n    num_lawname_judgment = []\n    num_lawname = []\n    for i in range(len(lawname_judgment)):\n        num_lawname_judgment.append(lawname_judgment[i][0])\n        num_lawname.append(lawname_judgment[i][3])\n        \n    # 사무가 많은 법령명 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    plt.bar(range(len(num_lawname_judgment)), num_lawname_judgment, color=colors)\n    plt.title('\\n\\n\\n 법령명별 사무판단 개수 파악\\n')\n    plt.ylabel('개수')\n    plt.xlim([-1,len(num_lawname_judgment)])\n    plt.xticks([])\n    plt.ylim([0,400]);\n    plt.yticks(np.arange(0, 400, step=100));\n    \n    # 사무가 가장 많은 법령명 5개 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    bar = plt.bar(range(5), num_lawname_judgment[:5], color=colors)\n    plt.title('\\n\\n\\n 법령명별 사무판단 Top5 개수 파악\\n')\n    plt.ylabel('개수')\n    plt.xlim([-0.5,4.5])\n    plt.xticks(np.arange(0, 5, 1), labels = ['\\n'+num_lawname[0],num_lawname[1],'\\n\\n'+num_lawname[2],num_lawname[3],'\\n'+num_lawname[4]])\n    plt.ylim([0,400]);\n    plt.yticks(np.arange(0, 400, step=100));\n    for rect in bar:\n        height = rect.get_height()\n        plt.text(rect.get_x() + rect.get_width()/2.0, height, '%d' % height, ha='center', va='bottom', size = 10)\n\n\nnum_lawname_judgment_graph(data)"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html#section-3",
    "href": "dev_posts/EDA/BaseTable2_EDA.html#section-3",
    "title": "Base Table을 활용한 EDA",
    "section": "",
    "text": "사무비율이 가장 큰 법령명 파악\n\ndef ratio_lawname_judgment_graph(df):\n    # 각 법령명 별 사무판단 갯수 파악\n    lawname_judgment = []\n    for ii in df['법령명'].unique():\n        lawname_count_0 = len(df.loc[(df['법령명']==ii) & (df['사무판단']==0)])\n        lawname_count_1 = len(df.loc[(df['법령명']==ii) & (df['사무판단']==1)])\n        # [1인 갯수, 0인 갯수, 1인 비율, 법령명]\n        lawname_judgment.append([lawname_count_1, lawname_count_0, lawname_count_1/(lawname_count_0+lawname_count_1), ii])\n    \n    # 사무가 가장 많은 법령명 파악\n    lawname_judgment.sort(key=lambda x:x[2], reverse = True)\n    \n    ratio_lawname_judgment = []\n    ratio_lawname = []\n    for i in range(len(lawname_judgment)):\n        ratio_lawname_judgment.append(lawname_judgment[i][2])\n        ratio_lawname.append(lawname_judgment[i][3])\n\n    # 사무가 많은 법령명 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    plt.bar(range(len(ratio_lawname_judgment)), ratio_lawname_judgment, color=colors)\n    plt.title('\\n\\n\\n 법령명별 사무판단 비율 파악\\n')\n    plt.ylabel('비율')\n    plt.xlim([-1,len(ratio_lawname_judgment)])\n    plt.xticks([])\n    plt.ylim([0,1.2]);\n    plt.yticks(np.arange(0, 1.2, step=0.2));\n    \n    # 사무가 가장 많은 법령명 5개 순서대로 막대 그래프\n    fig, ax = plt.subplots(figsize=(7.5, 4.5))\n    colors = sns.color_palette('pastel')[4]\n    bar = plt.bar(range(5), ratio_lawname_judgment[:5], color=colors)\n    plt.title('\\n\\n\\n 법령명별 사무판단 Top5 비율 파악\\n')\n    plt.ylabel('비율')\n    plt.xlim([-0.5,4.5])\n    plt.xticks(np.arange(0, 5, 1), labels = [ratio_lawname[0],'\\n'+ratio_lawname[1],'\\n\\n'+ratio_lawname[2],ratio_lawname[3],'\\n'+ratio_lawname[4]])\n    plt.ylim([0,1.2]);\n    plt.yticks(np.arange(0, 1.2, step=0.2));\n    for rect in bar:\n        height = rect.get_height()\n        plt.text(rect.get_x() + rect.get_width()/2.0, height, '%.3f' % height, ha='center', va='bottom', size = 10)\n\n\nratio_lawname_judgment_graph(data)"
  },
  {
    "objectID": "dev_posts/EDA/BaseTable2_EDA.html#법령구분에-따른-사무판단",
    "href": "dev_posts/EDA/BaseTable2_EDA.html#법령구분에-따른-사무판단",
    "title": "Base Table을 활용한 EDA",
    "section": "4) 법령구분에 따른 사무판단",
    "text": "4) 법령구분에 따른 사무판단\n\n법령구분 종류: 3개\n\n법령구분이 1인 경우 : 365424개\n법령구분이 2인 경우 : 319805개\n법령구분이 3인 경우 : 176395개\n\n\n\ndef lawclass_judgment_graph(df):\n    groups = ['1', '2', '3']\n    values1 = [len(df.loc[(df['법령구분']==1) & (df['사무판단']==0) ]), len(df.loc[(df['법령구분']==2) & (df['사무판단']==0) ]), len(df.loc[(df['법령구분']==3) & (df['사무판단']==0) ])]\n    values2 = [len(df.loc[(df['법령구분']==1) & (df['사무판단']==1) ]), len(df.loc[(df['법령구분']==2) & (df['사무판단']==1) ]), len(df.loc[(df['법령구분']==3) & (df['사무판단']==1) ])]\n    fig, ax = plt.subplots(figsize=(3, 5))\n    colors = sns.color_palette('pastel')[3:5]\n\n    # stack bar 로 구성\n    ax.bar(groups, values1, color = colors[0])\n    ax.bar(groups, values2, bottom = values1, color = colors[1])\n    plt.title('법령구분에 따른 사무판단 여부 파악\\n\\n')\n    plt.xlabel('법령구분')\n    plt.ylabel('개수')\n    plt.legend(['사무가 아니다', '사무이다'], bbox_to_anchor=(1.7, 1))\n    plt.ylim([0,400000])\n    plt.yticks(np.arange(0, 500000, step=100000))\n    plt.show()\n\n\nlawclass_judgment_graph(data)\n\n\n\n\n\n# def law_work_count(i):\n#     a = len(df.loc[(df['법령구분']==i) & (df['사무판단']==0), ])\n#     b = len(df.loc[(df['법령구분']==i) & (df['사무판단']==1), ])\n#     c = len(df.loc[(df['법령구분']==i) & (df['사무판단']==2), ])\n\n#     print(f\"법령 구분 {i}일때 ========\")\n#     print(f\"사무x: {a}\")\n#     print(f\"사무O: {b}\")\n#     print(f\"애매: {c}\")\n    \n\n#     result = [a, b, c]\n#     return result\n\n\n# result = []\n# for i in range(1, 4):\n#     result.append(law_work_count(i))\n# result\n\n\n# # 법령 구분에 따른 사무판단 비율 계산\n# ratio_df = df.groupby(['법령구분', '사무판단']).size().unstack().T\n# ratio_df = ratio_df.div(ratio_df.sum(axis=1), axis=0)\n\n# # 비율을 시각화\n# ratio_df.T.plot(kind='bar', stacked=True)\n# plt.title('법령구분에 따른 사무판단 비율')\n# plt.xlabel('법령구분')\n# plt.ylabel('Administrative Decision')\n# plt.show()"
  }
]