[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "My Blog",
    "section": "",
    "text": "임동건 블로그입니다."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MyBlog",
    "section": "",
    "text": "프로젝트를 시작합니다!!!\n\n\n\n\n\n\n\n\n  \n\n\n\n\nOpenAI DevDay, Opening Keynote 임동건\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nData Load and Python\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nQuarto\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 4, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/yj story/index.html",
    "href": "posts/yj story/index.html",
    "title": "YuJeong’s first post",
    "section": "",
    "text": "OpenAI DevDay\nYuJeong’s first post 이 텍스트는 OpenAI의 개발자 대회(DevDay)에서 Sam Altman이 한 발표의 전문입니다. 그는 OpenAI가 지난 한 해 동안 이룬 성과들을 소개하고, 새로운 기능과 서비스를 발표했습니다. 발표 내용에는 ChatGPT의 ’low-key research preview’로부터 시작하여 GPT-4의 출시, 그리고 음성 및 시각 능력을 갖춘 ChatGPT, 그리고 DALL-E 3와 같은 세계에서 가장 진보된 이미지 모델까지 여러 발전이 포함되었습니다. 그는 또한 OpenAI가 어떻게 사람들의 일상 생활과 창의적 작업을 도와주고 있는지 여러 사례를 통해 보여주었습니다. 이어서 새로운 GPT-4 Turbo 모델, 기능 향상, 더 긴 컨텍스트 길이 지원, JSON 모드, 더 나은 세계 지식, 새로운 모달리티 지원 등을 발표했습니다. 이러한 개선은 개발자들이 더 쉽게 AI를 자신들의 앱과 서비스에 통합할 수 있도록 돕기 위함입니다.\n또한, 그는 Microsoft와의 깊은 협력 관계를 강조하며, Microsoft의 CEO인 Satya Nadella가 무대에 올라 두 회사 간의 파트너십과 AI의 미래에 대해 이야기했습니다. 발표의 끝부분에서는 개발자들이 쉽게 자신만의 ChatGPT 버전을 만들고 공유할 수 있는 GPTs라는 새로운 개념을 소개하며, 이를 통해 사용자들이 더 풍부하고 개인화된 경험을 할 수 있게 될 것이라고 설명했습니다.\n이 발표는 기술의 진보와 그것이 사회에 미치는 긍정적 영향에 대한 강한 낙관론을 내포하고 있습니다. OpenAI는 AI 기술을 통해 개인의 권한을 강화하고, 창의적인 작업을 돕는 것을 목표로 하고 있으며, 그들이 소개한 새로운 도구들은 개발자들에게 큰 가능성을 열어줄 것으로 보입니다. 이 발표는 AI 기술이 사람들의 삶에 가져올 변화를 두려워하기보다는 그것을 어떻게 활용하고, 우리 사회에 긍정적인 영향을 끼칠 수 있을지에 대해 고민하고 준비해야 함을 강조합니다. OpenAI가 앞으로도 사용자들의 피드백을 바탕으로 시스템을 지속적으로 업데이트하고, AI 기술이 일상 곳곳에 통합될 때 우리 모두가 요구할 때마다 ’수퍼파워’를 갖게 될 미래를 기대하며 발표를 마쳤습니다."
  },
  {
    "objectID": "posts/yj story/index.html#고유정-포스트",
    "href": "posts/yj story/index.html#고유정-포스트",
    "title": "YuJeong’s first post",
    "section": "고유정 포스트",
    "text": "고유정 포스트"
  },
  {
    "objectID": "posts/donggeon/index.html",
    "href": "posts/donggeon/index.html",
    "title": "OpenAI DevDay, Opening Keynote 임동건",
    "section": "",
    "text": "OpenAI DevDay, Opening Keynote\n\n\n정리\n\nGPT 4 Turbo 출시\n\n128,000 토큰 컨텍스트 (300페이지 이상의 텍스트에 해당하는 내용)\n함수 여러개 호출하기 편해짐\n23년 4월 까지의 데이터 최신화\n모델 개선\n\nGPT-4 turbo Vision API 출시\n음성합성 + 음성인식 개선\n\n파인튜닝 오픈\n\nGPT-3.5 파인튜닝 16k 버전 오픈\nGPT-4 파인튜닝은 일부 실험 접근 허용\n\nGPT-4 가격 인하\n\n인풋 토큰 : 1/3\n아웃풋 토큰 : 1/2\n\n\nGPTs 출시\n\n사용자 지정 버전의 GPT (chatbot 만들기 가능)\nGPT Store에 자신이 만든 앱을 통해 수익창출이 가능해짐\n\nAssistant API — API 개발을 쉽게 만들어 줌\n\n대화 내역 기반, 검색, 코드 실행, 함수 실행을 잘 활용할 수 있게 만듦\n\n\n\n\n\n생각\n\nGPT 공개 이후에 코딩 오류 수정시 엄청난 시간 절약을 할 수 있어 기술 개발을 위해 문턱을 낮춰주는 매우 좋은 서비스라고 생각했었다. 이런 기술 개발을 위한 문턱을 낮추는 일이 GPT 4 Turbo로 한 번 더 낮아진 것 같다는 생각이 들게 되었다. 특히 GPT Store를 통해 여러 아이디어를 가진 스타트업 기업들이 많이 생성될 것으로 예상이 된다. 따라서 앞으로는 어떤 지식이나 기술보다 사람들의 니즈를 잘 파악하는 것이 더 중요해질 것으로 생각된다.\n \n\n\n\n\n\nWriter : 임동건"
  },
  {
    "objectID": "posts/donggeon/index.html#임동건-포스트",
    "href": "posts/donggeon/index.html#임동건-포스트",
    "title": "Donggeon’s first post",
    "section": "임동건 포스트",
    "text": "임동건 포스트"
  },
  {
    "objectID": "posts/donggeon/index.html#정리",
    "href": "posts/donggeon/index.html#정리",
    "title": "Donggeon’s first post",
    "section": "",
    "text": "GPT 4 Turbo 출시\n\n128,000 토큰 컨텍스트 (300페이지 이상의 텍스트에 해당하는 내용)\n함수 여러개 호출하기 편해짐\n23년 4월 까지의 데이터 최신화\n모델 개선\n\nGPT-4 turbo Vision API 출시\n음성합성 + 음성인식 개선\n\n파인튜닝 오픈\n\nGPT-3.5 파인튜닝 16k 버전 오픈\nGPT-4 파인튜닝은 일부 실험 접근 허용\n\nGPT-4 가격 인하\n\n인풋 토큰 : 1/3\n아웃풋 토큰 : 1/2\n\n\nGPTs 출시\n\n사용자 지정 버전의 GPT (chatbot 만들기 가능)\nGPT Store에 자신이 만든 앱을 통해 수익창출이 가능해짐\n\nAssistant API — API 개발을 쉽게 만들어 줌\n\n대화 내역 기반, 검색, 코드 실행, 함수 실행을 잘 활용할 수 있게 만듦"
  },
  {
    "objectID": "posts/donggeon/index.html#생각",
    "href": "posts/donggeon/index.html#생각",
    "title": "Donggeon’s first post",
    "section": "",
    "text": "GPT 공개 이후에 코딩 오류 수정시 엄청난 시간 절약을 할 수 있어 기술 개발을 위해 문턱을 낮춰주는 매우 좋은 서비스라고 생각했었다. 이런 기술 개발을 위한 문턱을 낮추는 일이 GPT 4 Turbo로 한 번 더 낮아진 것 같다는 생각이 들게 되었다. 특히 GPT Store를 통해 여러 아이디어를 가진 스타트업 기업들이 많이 생성될 것으로 예상이 된다. 따라서 앞으로는 어떤 지식이나 기술보다 사람들의 니즈를 잘 파악하는 것이 더 중요해질 것으로 생각된다."
  },
  {
    "objectID": "posts/donggeon/index.html#writer-임동건",
    "href": "posts/donggeon/index.html#writer-임동건",
    "title": "OpenAI DevDay, Opening Keynote 임동건",
    "section": "Writer : 임동건",
    "text": "Writer : 임동건"
  },
  {
    "objectID": "posts/start_quarto/index.html",
    "href": "posts/start_quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "Quarto의 장점\n\n123"
  },
  {
    "objectID": "about.html#team-members",
    "href": "about.html#team-members",
    "title": "CGInside alpha",
    "section": "Team Members",
    "text": "Team Members\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n노희찬\n고유정\n임동건\n\n\n클라우드 아키텍트\n데이터 사이언티스트\n데이터 사이언티스트\n\n\n풀스택 개발자\n데이터 분석 컨설턴트\n솔루션 개발자"
  },
  {
    "objectID": "posts/data/assignment.html",
    "href": "posts/data/assignment.html",
    "title": "Data Load and Python",
    "section": "",
    "text": "데이터 로드와 파이썬 되는지 확인 # Data Load and Python\n# 라이브러리 파일 실행\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport csv\nimport os\npath = '/Users/limdonggeon/Desktop/workspace/limdg119.github.io/posts/data'"
  },
  {
    "objectID": "posts/data/assignment.html#총-승차인원유임승차무임승차이-가장-많은-역과-그-역의-승차인원을-출력하고-총-하차인원유임하차무임하차이-가장-많은-역과-그-역의-하차인원을-출력하세요.",
    "href": "posts/data/assignment.html#총-승차인원유임승차무임승차이-가장-많은-역과-그-역의-승차인원을-출력하고-총-하차인원유임하차무임하차이-가장-많은-역과-그-역의-하차인원을-출력하세요.",
    "title": "Data Load and Python",
    "section": "1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.",
    "text": "1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.\n\nprint('1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.')\n# 역별 승차인원 ndarray 만들기\ntotal_board = stationary_board + free_board\n# 최대 승차인원 값과 인덱스 찾기\nboard_max_idx = np.argmax(total_board)\nboard_max_value = total_board[board_max_idx]\nprint(f'최대 승차 : {station1[board_max_idx]}역 {board_max_value}명 승차')\n\n# 역별 하차인원 ndarray 만들기\ntotal_deboard = stationary_deboard + free_deboard\n# 최대 하차인원 값과 인덱스 찾기\ndeboard_max_idx = np.argmax(total_deboard)\ndeboard_max_value = total_deboard[deboard_max_idx]\nprint(f'최대 하차 : {station1[deboard_max_idx]}역 {deboard_max_value}명 하차')\n\n1-1. 총 승차인원(유임승차+무임승차)이 가장 많은 역과 그 역의 승차인원을 출력하고 총 하차인원(유임하차+무임하차)이 가장 많은 역과 그 역의 하차인원을 출력하세요.\n최대 승차 : 2호선 강남역 2209994명 승차\n최대 하차 : 2호선 강남역 2175932명 하차"
  },
  {
    "objectID": "posts/data/assignment.html#유임승차자의-비율유임승차총-승차인원이-가장-높은-상위-10개-역과-각각의-유임승차자-비율을-구하세요.",
    "href": "posts/data/assignment.html#유임승차자의-비율유임승차총-승차인원이-가장-높은-상위-10개-역과-각각의-유임승차자-비율을-구하세요.",
    "title": "Data Load and Python",
    "section": "1-2. 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.",
    "text": "1-2. 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.\n\nprint('1-2 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.')\n# 역별 유임승차자 비율 ndarray 만들기\nstationary_rate = stationary_board/total_board\n\n# 유임승차자 비율 큰 순서로 정렬한 인덱스\nsort_index = np.argsort(stationary_rate)[ : : -1]\n\n# 상위 10개역 출력\nfor i in range(10):\n    print(f'{i+1}. {station1[sort_index[i]]}역 유임승차자 비율 : {stationary_rate[sort_index[i]]}')\n\n1-2 유임승차자의 비율(유임승차/총 승차인원)이 가장 높은 상위 10개 역과 각각의 유임승차자 비율을 구하세요.\n1. 2호선 한양대역 유임승차자 비율 : 0.9556973033604169\n2. 공항철도 1호선 홍대입구역 유임승차자 비율 : 0.9471593106448806\n3. 2호선 홍대입구역 유임승차자 비율 : 0.94658480261284\n4. 경부선 서울역역 유임승차자 비율 : 0.9403566042189232\n5. 공항철도 1호선 마곡나루(서울식물원)역 유임승차자 비율 : 0.9400488818077928\n6. 9호선 신논현역 유임승차자 비율 : 0.9384016412930402\n7. 9호선 여의도역 유임승차자 비율 : 0.9373539462006335\n8. 6호선 한강진역 유임승차자 비율 : 0.9372195113990568\n9. 공항철도 1호선 디지털미디어시티역 유임승차자 비율 : 0.9338371458237441\n10. 공항철도 1호선 청라국제도시역 유임승차자 비율 : 0.9332706439591822"
  },
  {
    "objectID": "posts/data/assignment.html#출근-시간대7시9시-승차인원과-하차인원-각각에-대해-정렬된-barplot을-그리고-인원이-가장-많은-역과-인원을-각각-찾으세요.",
    "href": "posts/data/assignment.html#출근-시간대7시9시-승차인원과-하차인원-각각에-대해-정렬된-barplot을-그리고-인원이-가장-많은-역과-인원을-각각-찾으세요.",
    "title": "Data Load and Python",
    "section": "2-1. 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.",
    "text": "2-1. 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.\n\n# 출근 시간대 승차인원\ntime_board_7to9 = time_board_array[3,:] + time_board_array[4,:]\n# 출근 시간대 승차인원이 적은 순으로 인덱스와 값 정렬\ntime_board_7to9_idx = np.argsort(time_board_7to9)\ntime_board_7to9_value = time_board_7to9[time_board_7to9_idx]\n\n# 출근 시간대 하차인원 정렬\ntime_deboard_7to9 = time_deboard_array[3,:] + time_deboard_array[4,:]\n# 출근 시간대 하차인원이 적은 순으로 인덱스와 값 정렬\ntime_deboard_7to9_idx = np.argsort(time_deboard_7to9)\ntime_deboard_7to9_value = time_deboard_7to9[time_deboard_7to9_idx]\n\n\nprint('2-1 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.')\nprint(f'출근 시간대에 승차인원이 가장 많은 역 : {station2[time_board_7to9_idx[-1]]}역 {time_board_7to9_value[-1]}명 탑승')\nx_index = np.arange(len(time_board_7to9_idx))\nfig, ax = plt.subplots(figsize=(10,7))\nplt.bar(x_index,time_board_7to9_value,color = 'blue')\nplt.title(\"Board\")\nax.set_xlabel(\"Index of sorted stations\")\nax.set_ylabel(\"Number of person\")\nplt.show()\n\n2-1 출근 시간대(7시~9시) 승차인원과 하차인원 각각에 대해 정렬된 barplot을 그리고, 인원이 가장 많은 역과 인원을 각각 찾으세요.\n출근 시간대에 승차인원이 가장 많은 역 : 2호선 신림역 469127명 탑승\n\n\n\n\n\n\nprint(f'출근 시간대에 하차인원이 가장 많은 역 : {station2[time_deboard_7to9_idx[-1]]}역 {time_deboard_7to9_value[-1]}명 하차')\nx_index = np.arange(len(time_deboard_7to9_idx))\nfig, ax = plt.subplots(figsize=(10,7))\nplt.bar(x_index,time_deboard_7to9_value,color = 'blue')\nplt.title(\"Deboard\")\nax.set_xlabel(\"Index of sorted stations\")\nax.set_ylabel(\"Number of person\")\nplt.show()\n\n출근 시간대에 하차인원이 가장 많은 역 : 7호선 가산디지털단지역 486420명 하차\n\n\n\n\n\n\nprint(f'출근 시간대에 승차인원이 가장 많은 역 : {station2[time_board_7to9_idx[-1]]}역 {time_board_7to9_value[-1]}명 탑승')\nprint(f'출근 시간대에 하차인원이 가장 많은 역 : {station2[time_deboard_7to9_idx[-1]]}역 {time_deboard_7to9_value[-1]}명 하차')\nx_index = np.arange(len(time_deboard_7to9_idx))\nfig = plt.figure(figsize=(15, 6))\nax1 = fig.add_subplot(121)\nax1.bar(x_index,time_board_7to9_value,color = 'blue')\nax1.set_title(\"Board\")\nax1.set_xlabel(\"Index of sorted stations\")\nax1.set_ylabel(\"Number of person\")\nax2 = fig.add_subplot(122)\nax2.bar(x_index,time_deboard_7to9_value,color = 'blue')\nax2.set_title(\"Deboard\")\nax2.set_xlabel(\"Index of sorted stations\")\nax2.set_ylabel(\"Number of person\")\nplt.show()\n\n출근 시간대에 승차인원이 가장 많은 역 : 2호선 신림역 469127명 탑승\n출근 시간대에 하차인원이 가장 많은 역 : 7호선 가산디지털단지역 486420명 하차"
  },
  {
    "objectID": "posts/data/assignment.html#각-시간대별-모든-지하철역에서의-총-승차인원의-합과-총-하차인원의-합을-구하고-x축을-시간-y축을-인원으로-하는-그래프로-나타내시오.",
    "href": "posts/data/assignment.html#각-시간대별-모든-지하철역에서의-총-승차인원의-합과-총-하차인원의-합을-구하고-x축을-시간-y축을-인원으로-하는-그래프로-나타내시오.",
    "title": "Data Load and Python",
    "section": "2-2. 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.",
    "text": "2-2. 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.\n\n#시간대 별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합\nsum_time_board = []\nsum_time_deboard = []\nfor i in range(24):\n    sum_time_board.append(sum(time_board_array[i,:]))\n    sum_time_deboard.append(sum(time_deboard_array[i,:]))\n\nsum_time_board_array = np.array(sum_time_board)\nsum_time_deboard_array = np.array(sum_time_deboard)\n\n\nprint('2-2 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.')\nt_index = [t for t in range(4,28)]\nfig, ax = plt.subplots(figsize=(10,5))\nplt.title(\"Board & Deboard\")\nax.set_xlabel(\"Time\")\nax.set_ylabel(\"Number of person\")\nplt.plot(t_index,sum_time_board_array, label='board', color = 'blue', linewidth= '3')\nplt.plot(t_index,sum_time_deboard_array, label='deboard', color = 'red', linewidth= '3')\nplt.legend()\n\n2-2 각 시간대별 모든 지하철역에서의 총 승차인원의 합과 총 하차인원의 합을 구하고, x축을 시간, y축을 인원으로 하는 그래프로 나타내시오.\n\n\n&lt;matplotlib.legend.Legend at 0x148266f50&gt;"
  }
]